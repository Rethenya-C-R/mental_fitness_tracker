import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
cd/content/drive/My Drive/dataset
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df1=pd.read_csv("prevalence-by-mental-and-substance-use-disorder _AI.csv")
df2=pd.read_csv("mental-and-substance-use-as-share-of-disease -AI.csv")
df1.head()
df2.head(10)
data=pd.merge(df1,df2)
data.head(10)
data.isnull().sum()
data.drop('Code',axis=1,inplace=True)
data.size,data.shape
data.set_axis(['Country','Year','Schizophrenia','Bipolar_disorder','Eating_disorder','Anxiety','drug_usage','depression','alcohol','mental_fitness'],axis='columns',inplace=True)
data.head(10)

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Blues')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean=data['mental_fitness'].mean()
mean
fig=px.pie(data,values='mental_fitness',names='Year')
fig.show()

fig=px.line(data,x='Year',y='mental_fitness',color='Country',markers=True,color_discrete_sequence=['red','green'],template='plotly_dark')
fig.show()

data.head(10)
data.head()
data.info()
from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in data.columns:
  if data[i].dtype=='object':
    data[i]=l.fit_transform(data[i])

data.shape

#correlation
plt.figure(figsize=(10,7))
sns.heatmap(data.corr(method="spearman"), annot=True)
plt.title('Spearman correlation between the columns')
plt.show()
plt.figure(figsize=(10,7))
sns.heatmap(data.corr(method="pearson"), annot=True)
plt.title('Pearson correlation between the columns')
plt.show()
plt.figure(figsize=(10,7))
sns.heatmap(data.corr(method="kendall"), annot=True)
plt.title('Kendall correlation between the columns')
plt.show()


#linear regression
x=data.drop('mental_fitness',axis=1)
y=data['mental_fitness']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=2)
print("x_train:",x_train.shape)
print("x_test:",x_test.shape)
print("\ny_train:",y_train.shape)
print("y_test:",y_test.shape)
from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(x_train,y_train)
from sklearn.metrics import mean_squared_error,r2_score
y_pred=regressor.predict(x_train)
mse=mean_squared_error(y_train,y_pred)
r2=r2_score(y_train,y_pred)
rmse=(np.sqrt(mean_squared_error(y_train,y_pred)))
print("Linear regression model performance for training dataset")
print("\nmean squared error =",mse)
print("rmse=",rmse)
print("r2 score =",r2)
y_pred_test=regressor.predict(x_test)
mse=mean_squared_error(y_test,y_pred_test)
r2=r2_score(y_test,y_pred_test)
rmse=(np.sqrt(mean_squared_error(y_test,y_pred_test)))
print("Linear regression model performance for test dataset")
print("\nmean squared error =",mse)
print("rmse=",rmse)
print("r2 score =",r2)


#random forest
from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()
rf.fit(x_train,y_train)
y_pred=rf.predict(x_train)
mse=mean_squared_error(y_train,y_pred)
rmse=(np.sqrt(mean_squared_error(y_train,y_pred)))
r2=r2_score(y_train,y_pred)
print("Random Forest model performance for training dataset")
print("\nmean squared error =",mse)
print("rmse=",rmse)
print("r2 score =",r2)
rf.fit(x_train,y_train)
y_pred_test=rf.predict(x_test)
mse=mean_squared_error(y_test,y_pred_test)
rmse=(np.sqrt(mean_squared_error(y_test,y_pred_test)))
r2=r2_score(y_test,y_pred_test)
print("Random Forest model performance for test dataset")
print("\nmean squared error =",mse)
print("rmse=",rmse)
print("r2 score =",r2)









